package entities;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.Map;import java.util.Set;public class Room {  private String description;  private String name;  private HashSet items;  private HashMap roomEnemies;  private Map<String, RoomExit> roomExits;  private boolean visited;  public Room(String description, String name) {    this.description = description;    this.name = name;    this.items = new HashSet();    this.roomEnemies = new HashMap();    this.visited = false;  }  public Room(String description, String name, Map<String, RoomExit> roomExits) {    this(description, name);    this.roomExits = roomExits;  }  public String getShortDescription() {    return description;  }  public String getLongDescription() {    return description + ".\n" + getExitString();  }  public String getExitString() {    StringBuilder returnString = new StringBuilder("You can go ");    for (String key : roomExits.keySet()) {      returnString.append(key).append(" ");    }    return returnString.toString();  }  public void addItem(Item myItem) {    items.add(myItem);  }  public void addEnemy(Enemy myEnemy) {    roomEnemies.put(myEnemy.getName(), myEnemy);  }  public String getAllEnemyInfo() {    //print all enemy information    String returnString = "Your Enemies in this room are:";    Enemy currentEnemy;    String currentString;    for (Iterator iter = roomEnemies.keySet().iterator(); iter.hasNext(); ) {      currentString = (String) iter.next();      currentEnemy = (Enemy) roomEnemies.get(currentString);      returnString +=          "\n entities.Enemy: " + currentEnemy.getName() + " \t| Level: " + currentEnemy.getLevel();    }    return returnString;  }  public void killEnemy(String enemyName) {    roomEnemies.remove(enemyName);  }  public boolean hasEnemies() {    return roomEnemies.size() > 0;  }  /**   * Removes entities.Item from rooms   */  public void removeItem(Item myItem) {    items.remove(myItem);  }  public Item getItem(String item) {    Iterator iter = items.iterator();    while (iter.hasNext()) {      Item anItem = (Item) iter.next();      if (anItem.getName().equalsIgnoreCase(item)) {        return anItem;      }    }    return null;  }  public String getMyItemsDescription() {    if (items.isEmpty()) {      return "There are no items in this room";    } else {      StringBuilder returnString = new StringBuilder("There are " + items.size() + " items in this room:\n");      Item currentItem;      for (Iterator iter = items.iterator(); iter.hasNext(); ) {        currentItem = (Item) iter.next();        returnString.append("\t- ").append(currentItem.toString());      }      return returnString.toString();    }  }  public String getName() {    return name;  }  public Map<String, RoomExit> getRoomExits() {    return roomExits;  }  public void setRoomExits(Map<String, RoomExit> roomExits) {    this.roomExits = roomExits;  }  public boolean isVisited() {    return visited;  }  public void setVisited(boolean visited) {    this.visited = visited;  }}