package entities;import input.Command;import enums.CommandWord;import input.CommandWords;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.StringTokenizer;public class Parser {  private CommandWords commands;  public Parser() {    commands = new CommandWords();  }  public Command getCommand() {    String inputLine = "";    String word1;    String word2;    System.out.print("> ");    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));    try {      inputLine = reader.readLine().trim().toLowerCase();    } catch (IOException e) {      System.out.println("There was an error during reading: " + e.getMessage());    }    StringTokenizer tokenizer = new StringTokenizer(inputLine);    if (tokenizer.hasMoreTokens()) {      word1 = tokenizer.nextToken();    } else {      word1 = null;    }    if (tokenizer.hasMoreTokens()) {      word2 = tokenizer.nextToken();    } else {      word2 = null;    }    // note: we just ignore the rest of the input line.    // Now check whether this word is known. If so, create a command    // with it. If not, create an unknown command).    if (CommandWord.isCommandValid(word1)) {      return new Command(commands.getCommandWord(word1), word2);    } else {      return new Command(CommandWord.UNKNOWN, word2);    }  }  /**   * Print out a list of valid command words.   */  public void showCommands() {    commands.showAll();  }}